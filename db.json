{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"01eaa25fed62d0422676f71e6f52957bb4217815","modified":1526377992532},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1525093549088},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1525093549091},{"_id":"themes/maupassant/_config.yml","hash":"f424e44357e0dedd42a1c5b8641dcfc14d75b70e","modified":1526263289204},{"_id":"themes/maupassant/README.md","hash":"3c16d9aa7cc1cae86847408f77704f93a80cd1fa","modified":1525093549093},{"_id":"themes/maupassant/db.json","hash":"dfe8380263ace8fb180b4eb527e82db3e5a11978","modified":1525093549098},{"_id":"themes/maupassant/package.json","hash":"066bbad92b037f8f77d2bd4431b125391576c12d","modified":1525093549187},{"_id":"source/_posts/centos7如何安装Python3.md","hash":"21620124f26aa4f1f0d0d9468918d835735a3c21","modified":1527226509491},{"_id":"source/_posts/python-logging简单使用.md","hash":"1377c043d1a2ee766f696acc3854c9ac08a6c05d","modified":1526802495042},{"_id":"source/_posts/hello-world.md","hash":"202d427a6931c3ac558275765fd4da2454028124","modified":1526262606855},{"_id":"source/_posts/java环境变量.md","hash":"5c500339fc1e430bd498861bbde9d4b12486949c","modified":1526262649738},{"_id":"source/_posts/spring-boot实战1-5的集成测试.md","hash":"f6112cf271b406bd24cd0fc09b09ac5abbe961f6","modified":1526378001371},{"_id":"source/_posts/开源协议的区别.md","hash":"f7df0d8c7c62efb2a0d49c56efe0ec4763565739","modified":1525093548815},{"_id":"source/_posts/添加第二个git账号.md","hash":"ee83284f93a12e311003ac51c54a872952c55e62","modified":1527226654294},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1525093549101},{"_id":"source/_posts/使用Travis进行hexo的持续集成.md","hash":"ef5bc07873cb11f3750bbf6b588c7299ec5c8c7d","modified":1526262641597},{"_id":"themes/maupassant/languages/en.yml","hash":"8574e8c36f4c72118f27f7ff7353b2a9ceda2a9b","modified":1525093549104},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1525093549106},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1525093549109},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1525093549111},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1525093549113},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"fc32c57220ecc58cb1920623105ed8901bc4cbcf","modified":1525093549116},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1525093549120},{"_id":"themes/maupassant/layout/archive.pug","hash":"e749f047da5eb6449060a724a543ce84e80a2b8b","modified":1525093549169},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1525093549171},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1525093549173},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1525093549175},{"_id":"themes/maupassant/layout/page.pug","hash":"a21e638d5459120d88e45e8f18a23dc072d9ca07","modified":1525093549177},{"_id":"themes/maupassant/layout/post.pug","hash":"c8300cff3e8cbfd70511658dcfb0a56845a1538d","modified":1525093549179},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1525093549181},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1525093549184},{"_id":"source/_posts/添加第二个git账号/addkey.png","hash":"6a9d188cf5d71d9bb645a95869627a104309ed1b","modified":1527225624292},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"b837cd27b9c2a8da82bc6f3f6619b7de752c627a","modified":1526801542665},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1525093549129},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"b32f8585ee32f453cf53c7d1ba7e5647d6dec263","modified":1525093549127},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"caf8d70b9c556a63a56d29cf22f550a382eac67f","modified":1526801542666},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1525093549137},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"308d3feba57d1ffe390a2b3c46bc5b74de87ffdd","modified":1526801542663},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"7ee94ae477122a800fa9bcee5b9795810e9f8e40","modified":1526801542663},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1525093549144},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1525093549147},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1525093549149},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1525093549152},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1525093549154},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1525093549157},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1525093549159},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1525093549161},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1525093549163},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1525093549166},{"_id":"themes/maupassant/source/css/default.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1525093549190},{"_id":"themes/maupassant/source/css/donate.css","hash":"b41342b45a1fabd35c84001f82bc7caf6583152a","modified":1525093549192},{"_id":"themes/maupassant/source/css/style.scss","hash":"2fd9aa5c41d77ad007fd7bb08610b20dfea09581","modified":1525093549195},{"_id":"themes/maupassant/source/donate/index.html","hash":"0af6d902aa6b0d96d4620c61d3d4cc46128493fb","modified":1526801542665},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1525093549201},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1525093549204},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1525093549210},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1525093549207},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1525093549213},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1525093549217},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1525093549221},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1525093549223},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1525093549226},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1525093549236},{"_id":"themes/maupassant/source/js/donate.js","hash":"a9ff8d20f00ba6c216e6a55865c0b47ce6b28f2c","modified":1525093549233},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1525093549229},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1525093549244},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1525093549247},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1525093549251},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1525093549255},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1525093549240},{"_id":"public/2018/05/25/添加第二个git账号/index.html","hash":"9d4c2c96faeab2e39a82a74ad9763c7dea089db7","modified":1527226684759},{"_id":"public/2018/05/20/python-logging简单使用/index.html","hash":"09c8b951414df40e8320fa81efe53fefd90cc6fb","modified":1527226684759},{"_id":"public/2018/05/18/centos7如何安装Python3/index.html","hash":"ab78d3c12352ceadb51f86290d426a6f0e7a5853","modified":1527226684759},{"_id":"public/2018/05/14/spring-boot实战1-5的集成测试/index.html","hash":"180f166a7812d66e8e55e3091246115337fbc64e","modified":1527226684759},{"_id":"public/2018/04/30/使用Travis进行hexo的持续集成/index.html","hash":"c46071a1a850701ebec8cefff5f9bb2c0ee9a1d3","modified":1527226684759},{"_id":"public/2018/04/30/java环境变量/index.html","hash":"e64d74a0152216be79927cc03e9b113859be4b3e","modified":1527226684759},{"_id":"public/2018/04/10/hello-world/index.html","hash":"19a11bf222bbc96337a8e1e49bad682f2ed3c08e","modified":1527226684759},{"_id":"public/2018/04/05/开源协议的区别/index.html","hash":"a2423762793bd57233e5e47f299e4bd159e71260","modified":1527226684759},{"_id":"public/archives/index.html","hash":"d75f473b9c55d691f91aa32f2ebd97f6dcd0a190","modified":1527226684759},{"_id":"public/archives/2018/index.html","hash":"d75f473b9c55d691f91aa32f2ebd97f6dcd0a190","modified":1527226684759},{"_id":"public/archives/2018/04/index.html","hash":"62fd16cd49c293020b0cf86ebb72a002eb06d554","modified":1527226684759},{"_id":"public/archives/2018/05/index.html","hash":"decda592ffb56fd7d1eba1bc5415cde6f8adc8cf","modified":1527226684759},{"_id":"public/index.html","hash":"ffd5028eabb4aaa83fc9b8b5bbab2e52fdbfb8ae","modified":1527226684759},{"_id":"public/tags/python/index.html","hash":"94a3cdbab93daf90d69cec503cf12e2aa4140156","modified":1527226684759},{"_id":"public/tags/java/index.html","hash":"5a45c042fa94740c4a1091de2823fe467b4951b3","modified":1527226684759},{"_id":"public/tags/spring/index.html","hash":"b7feabff364d9a799cf861ad4ca2121f045eb459","modified":1527226684759},{"_id":"public/tags/持续集成/index.html","hash":"1b80ea41c5cf0485e77c644db45011ebed54f40d","modified":1527226684759},{"_id":"public/CNAME","hash":"01eaa25fed62d0422676f71e6f52957bb4217815","modified":1527226684759},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1527226684759},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1527226684759},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1527226684759},{"_id":"public/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1527226684759},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1527226684759},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1527226684759},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1527226684759},{"_id":"public/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1527226684759},{"_id":"public/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1527226684759},{"_id":"public/2018/05/25/添加第二个git账号/addkey.png","hash":"6a9d188cf5d71d9bb645a95869627a104309ed1b","modified":1527226684759},{"_id":"public/css/donate.css","hash":"d0079ba8202d925a93ab1cb44f2087b81f476755","modified":1527226684806},{"_id":"public/donate/index.html","hash":"9c807d8002799fbb9a149e1ee3f60a96de110953","modified":1527226684806},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1527226684822},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1527226684822},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1527226684822},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1527226684822},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1527226684822},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1527226684822},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1527226684822},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1527226684822},{"_id":"public/css/style.css","hash":"bec4cd8e3a4c354f5841226683a2acfac0c000f3","modified":1527226684822},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1527226684822}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"如何安装Python3","date":"2018-05-17T23:20:30.000Z","_content":"\n1. 编译环境准备\n    ```\n    yum groupinstall 'Development Tools'\n    yum install zlib-devel bzip2-devel openssl-devel ncurese-devel\n    ```\n\n2. 下载python3.6.5代码包\n    ```\n    wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz\n    ```\n\n    可以在**https://www.python.org/ftp/python/** 里面查找需要用的版本  \n\n3. 编译\n\n    ```\n    tar Jxvf Python-3.6.5.tar.xz\n    cd Python-3.6.5\n    ./configure --prefix=/usr/local/python3\n    make && make install\n    ```\n\n4. 更换Python版本\n\n    - 备份旧版本  \n    `mv /usr/bin/python /usr/bin/python2.7`\n    - 新建指向新版本 Python 以及 pip 的软连接\n        ```\n        ln -s /usr/local/python3/bin/python3.6 /usr/bin/python\n        ln -s /usr/local/python3/bin/pip3 /usr/bin/pip  \n        ```\n\n5. 更新yum相关设置\n\n    打开文件\n    ```\n    vi /usr/bin/yum\n    ```\n    将第一行修改为\n    ```\n    #!/usr/bin/python2.7\n    ```\n    若出现错误\n    ```\n    File \"/usr/libexec/urlgrabber-ext-down\", line 28\n    ```\n    将/usr/libexec/urlgrabber-ext-down的第一行修改\n\n    [参考链接](\"https://www.jianshu.com/p/8bd6e0695d7f\")\n\n#### 其他尝试\n\n若第4步改为\n```\nln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n```\npython 将不用修改其他的内容，但是在使用python3 安装的库时候，例如使用gunicorn,必须使用 `python3 -m gunicorn ...` 不能直接用gunicorn,因为默认是使用python(当前是python2)进行执行的\n\n还是要等centos进行支持呀","source":"_posts/centos7如何安装Python3.md","raw":"---\ntitle: 如何安装Python3\ndate: 2018-05-18 07:20:30\ntags: python\n---\n\n1. 编译环境准备\n    ```\n    yum groupinstall 'Development Tools'\n    yum install zlib-devel bzip2-devel openssl-devel ncurese-devel\n    ```\n\n2. 下载python3.6.5代码包\n    ```\n    wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz\n    ```\n\n    可以在**https://www.python.org/ftp/python/** 里面查找需要用的版本  \n\n3. 编译\n\n    ```\n    tar Jxvf Python-3.6.5.tar.xz\n    cd Python-3.6.5\n    ./configure --prefix=/usr/local/python3\n    make && make install\n    ```\n\n4. 更换Python版本\n\n    - 备份旧版本  \n    `mv /usr/bin/python /usr/bin/python2.7`\n    - 新建指向新版本 Python 以及 pip 的软连接\n        ```\n        ln -s /usr/local/python3/bin/python3.6 /usr/bin/python\n        ln -s /usr/local/python3/bin/pip3 /usr/bin/pip  \n        ```\n\n5. 更新yum相关设置\n\n    打开文件\n    ```\n    vi /usr/bin/yum\n    ```\n    将第一行修改为\n    ```\n    #!/usr/bin/python2.7\n    ```\n    若出现错误\n    ```\n    File \"/usr/libexec/urlgrabber-ext-down\", line 28\n    ```\n    将/usr/libexec/urlgrabber-ext-down的第一行修改\n\n    [参考链接](\"https://www.jianshu.com/p/8bd6e0695d7f\")\n\n#### 其他尝试\n\n若第4步改为\n```\nln -s /usr/local/python3/bin/python3.6 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n```\npython 将不用修改其他的内容，但是在使用python3 安装的库时候，例如使用gunicorn,必须使用 `python3 -m gunicorn ...` 不能直接用gunicorn,因为默认是使用python(当前是python2)进行执行的\n\n还是要等centos进行支持呀","slug":"centos7如何安装Python3","published":1,"updated":"2018-05-25T05:35:09.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhljc1o80000s4u6j2d7avqt","content":"<ol>\n<li><p>编译环境准备</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &apos;Development Tools&apos;</span><br><span class=\"line\">yum install zlib-devel bzip2-devel openssl-devel ncurese-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载python3.6.5代码包</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz</span><br></pre></td></tr></table></figure>\n<p> 可以在<strong><a href=\"https://www.python.org/ftp/python/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/</a></strong> 里面查找需要用的版本  </p>\n</li>\n<li><p>编译</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar Jxvf Python-3.6.5.tar.xz</span><br><span class=\"line\">cd Python-3.6.5</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更换Python版本</p>\n<ul>\n<li>备份旧版本<br><code>mv /usr/bin/python /usr/bin/python2.7</code></li>\n<li>新建指向新版本 Python 以及 pip 的软连接  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/python3.6 /usr/bin/python</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>更新yum相关设置</p>\n<p> 打开文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/bin/yum</span><br></pre></td></tr></table></figure>\n<p> 将第一行修改为</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python2.7</span><br></pre></td></tr></table></figure>\n<p> 若出现错误</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File &quot;/usr/libexec/urlgrabber-ext-down&quot;, line 28</span><br></pre></td></tr></table></figure>\n<p> 将/usr/libexec/urlgrabber-ext-down的第一行修改</p>\n<p> <a href=\"&quot;https://www.jianshu.com/p/8bd6e0695d7f&quot;\">参考链接</a></p>\n</li>\n</ol>\n<h4 id=\"其他尝试\"><a href=\"#其他尝试\" class=\"headerlink\" title=\"其他尝试\"></a>其他尝试</h4><p>若第4步改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/python3.6 /usr/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure></p>\n<p>python 将不用修改其他的内容，但是在使用python3 安装的库时候，例如使用gunicorn,必须使用 <code>python3 -m gunicorn ...</code> 不能直接用gunicorn,因为默认是使用python(当前是python2)进行执行的</p>\n<p>还是要等centos进行支持呀</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>编译环境准备</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &apos;Development Tools&apos;</span><br><span class=\"line\">yum install zlib-devel bzip2-devel openssl-devel ncurese-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载python3.6.5代码包</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz</span><br></pre></td></tr></table></figure>\n<p> 可以在<strong><a href=\"https://www.python.org/ftp/python/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/</a></strong> 里面查找需要用的版本  </p>\n</li>\n<li><p>编译</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar Jxvf Python-3.6.5.tar.xz</span><br><span class=\"line\">cd Python-3.6.5</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更换Python版本</p>\n<ul>\n<li>备份旧版本<br><code>mv /usr/bin/python /usr/bin/python2.7</code></li>\n<li>新建指向新版本 Python 以及 pip 的软连接  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/python3.6 /usr/bin/python</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>更新yum相关设置</p>\n<p> 打开文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/bin/yum</span><br></pre></td></tr></table></figure>\n<p> 将第一行修改为</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python2.7</span><br></pre></td></tr></table></figure>\n<p> 若出现错误</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File &quot;/usr/libexec/urlgrabber-ext-down&quot;, line 28</span><br></pre></td></tr></table></figure>\n<p> 将/usr/libexec/urlgrabber-ext-down的第一行修改</p>\n<p> <a href=\"&quot;https://www.jianshu.com/p/8bd6e0695d7f&quot;\">参考链接</a></p>\n</li>\n</ol>\n<h4 id=\"其他尝试\"><a href=\"#其他尝试\" class=\"headerlink\" title=\"其他尝试\"></a>其他尝试</h4><p>若第4步改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/python3/bin/python3.6 /usr/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure></p>\n<p>python 将不用修改其他的内容，但是在使用python3 安装的库时候，例如使用gunicorn,必须使用 <code>python3 -m gunicorn ...</code> 不能直接用gunicorn,因为默认是使用python(当前是python2)进行执行的</p>\n<p>还是要等centos进行支持呀</p>\n"},{"title":"python logging简单使用","date":"2018-05-20T06:31:39.000Z","_content":"\nlogging一共有三种4种配置形式\n- 基础型 baseconfig\n- 代码型\n- 字典型\n- 文件ini型\n\n只使用了代码型\n```python\ndef custom_formatTime(record, datefmt=None):\n    return (datetime.datetime.utcnow() + datetime.timedelta(hours=8)).strftime(u\"%Y-%m-%d %H:%M:%S\")\n\n# 通过下面的方式进行简单配置输出方式与日志级别\nlogger = logging.getLogger(\"binance_coin\")\n# 写入日志文件\nhandler_file = logging.handlers\\\n    .RotatingFileHandler(\"logs/debug.log\", maxBytes=1024*1024, backupCount = 50,encoding = \"UTF-8\")#FileHandler(\"test.log\")\nhandler_file.setLevel(logging.INFO)\nhandler_error_file = logging.handlers\\\n    .RotatingFileHandler(\"logs/error.log\", maxBytes=1024*1024, backupCount = 10,encoding = \"UTF-8\")#FileHandler(\"test.log\")\nhandler_error_file.setLevel(logging.ERROR)\n# 打印日志文件到console\nhandler_console = logging.StreamHandler()\n# 格式化器\nformatter = logging.Formatter(\n    \"%(asctime)s %(name)-12s %(levelname)-8s %(message)s\")\nformatter.formatTime = custom_formatTime\n# 添加格式化到控制器\nhandler_console.setFormatter(formatter)\nhandler_file.setFormatter(formatter)\nhandler_error_file.setFormatter(formatter)\n# 添加处理器\nlogger.addHandler(handler_console)\nlogger.addHandler(handler_file)\nlogger.addHandler(handler_error_file)\n# log级别\nlogger.setLevel(logging.INFO)\n# 进行记录\nlogger.debug('often makes a very good meal of %s', 'visiting tourists')\n```\n#### 实现的需求\n1. 日志分割，使用RotatingFileHandler处理器设定了maxBytes，在日志文件大小为1M的时候就会将日志文件重命名为**debug.log.1**,然后新建一个**debug.log**,第二次的时候将**debug.log.1**->**debug.log.2**, 每次都会这样依次更改名字,直到日志文件数量到达backupCount的限制,将最老的一个删除以维持最多50个的日志文件。logging也可以使用时间分割\n2. 日志文件的编码, 需要在处理器里面指定`encoding = \"UTF-8\"`来避免出现日志编码错误\n3. 自定义时间，重写了formatter.formatTime来设定打印出来的时间始终是utc+8\n4. 分级别输出，info以上的日志都会用handler_file输出到**debug.log**，error以上的日志都会输出到**error.log**\n\n参考链接 [日志（Logging） — The Hitchhiker's Guide to Python](http://pythonguidecn.readthedocs.io/zh/latest/writing/logging.html)","source":"_posts/python-logging简单使用.md","raw":"---\ntitle: python logging简单使用\ndate: 2018-05-20 14:31:39\ntags: python\n---\n\nlogging一共有三种4种配置形式\n- 基础型 baseconfig\n- 代码型\n- 字典型\n- 文件ini型\n\n只使用了代码型\n```python\ndef custom_formatTime(record, datefmt=None):\n    return (datetime.datetime.utcnow() + datetime.timedelta(hours=8)).strftime(u\"%Y-%m-%d %H:%M:%S\")\n\n# 通过下面的方式进行简单配置输出方式与日志级别\nlogger = logging.getLogger(\"binance_coin\")\n# 写入日志文件\nhandler_file = logging.handlers\\\n    .RotatingFileHandler(\"logs/debug.log\", maxBytes=1024*1024, backupCount = 50,encoding = \"UTF-8\")#FileHandler(\"test.log\")\nhandler_file.setLevel(logging.INFO)\nhandler_error_file = logging.handlers\\\n    .RotatingFileHandler(\"logs/error.log\", maxBytes=1024*1024, backupCount = 10,encoding = \"UTF-8\")#FileHandler(\"test.log\")\nhandler_error_file.setLevel(logging.ERROR)\n# 打印日志文件到console\nhandler_console = logging.StreamHandler()\n# 格式化器\nformatter = logging.Formatter(\n    \"%(asctime)s %(name)-12s %(levelname)-8s %(message)s\")\nformatter.formatTime = custom_formatTime\n# 添加格式化到控制器\nhandler_console.setFormatter(formatter)\nhandler_file.setFormatter(formatter)\nhandler_error_file.setFormatter(formatter)\n# 添加处理器\nlogger.addHandler(handler_console)\nlogger.addHandler(handler_file)\nlogger.addHandler(handler_error_file)\n# log级别\nlogger.setLevel(logging.INFO)\n# 进行记录\nlogger.debug('often makes a very good meal of %s', 'visiting tourists')\n```\n#### 实现的需求\n1. 日志分割，使用RotatingFileHandler处理器设定了maxBytes，在日志文件大小为1M的时候就会将日志文件重命名为**debug.log.1**,然后新建一个**debug.log**,第二次的时候将**debug.log.1**->**debug.log.2**, 每次都会这样依次更改名字,直到日志文件数量到达backupCount的限制,将最老的一个删除以维持最多50个的日志文件。logging也可以使用时间分割\n2. 日志文件的编码, 需要在处理器里面指定`encoding = \"UTF-8\"`来避免出现日志编码错误\n3. 自定义时间，重写了formatter.formatTime来设定打印出来的时间始终是utc+8\n4. 分级别输出，info以上的日志都会用handler_file输出到**debug.log**，error以上的日志都会输出到**error.log**\n\n参考链接 [日志（Logging） — The Hitchhiker's Guide to Python](http://pythonguidecn.readthedocs.io/zh/latest/writing/logging.html)","slug":"python-logging简单使用","published":1,"updated":"2018-05-20T07:48:15.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhljc1ob0001s4u6l4kjm78m","content":"<p>logging一共有三种4种配置形式</p>\n<ul>\n<li>基础型 baseconfig</li>\n<li>代码型</li>\n<li>字典型</li>\n<li>文件ini型</li>\n</ul>\n<p>只使用了代码型<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">custom_formatTime</span><span class=\"params\">(record, datefmt=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (datetime.datetime.utcnow() + datetime.timedelta(hours=<span class=\"number\">8</span>)).strftime(<span class=\"string\">u\"%Y-%m-%d %H:%M:%S\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过下面的方式进行简单配置输出方式与日志级别</span></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">\"binance_coin\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 写入日志文件</span></span><br><span class=\"line\">handler_file = logging.handlers\\</span><br><span class=\"line\">    .RotatingFileHandler(<span class=\"string\">\"logs/debug.log\"</span>, maxBytes=<span class=\"number\">1024</span>*<span class=\"number\">1024</span>, backupCount = <span class=\"number\">50</span>,encoding = <span class=\"string\">\"UTF-8\"</span>)<span class=\"comment\">#FileHandler(\"test.log\")</span></span><br><span class=\"line\">handler_file.setLevel(logging.INFO)</span><br><span class=\"line\">handler_error_file = logging.handlers\\</span><br><span class=\"line\">    .RotatingFileHandler(<span class=\"string\">\"logs/error.log\"</span>, maxBytes=<span class=\"number\">1024</span>*<span class=\"number\">1024</span>, backupCount = <span class=\"number\">10</span>,encoding = <span class=\"string\">\"UTF-8\"</span>)<span class=\"comment\">#FileHandler(\"test.log\")</span></span><br><span class=\"line\">handler_error_file.setLevel(logging.ERROR)</span><br><span class=\"line\"><span class=\"comment\"># 打印日志文件到console</span></span><br><span class=\"line\">handler_console = logging.StreamHandler()</span><br><span class=\"line\"><span class=\"comment\"># 格式化器</span></span><br><span class=\"line\">formatter = logging.Formatter(</span><br><span class=\"line\">    <span class=\"string\">\"%(asctime)s %(name)-12s %(levelname)-8s %(message)s\"</span>)</span><br><span class=\"line\">formatter.formatTime = custom_formatTime</span><br><span class=\"line\"><span class=\"comment\"># 添加格式化到控制器</span></span><br><span class=\"line\">handler_console.setFormatter(formatter)</span><br><span class=\"line\">handler_file.setFormatter(formatter)</span><br><span class=\"line\">handler_error_file.setFormatter(formatter)</span><br><span class=\"line\"><span class=\"comment\"># 添加处理器</span></span><br><span class=\"line\">logger.addHandler(handler_console)</span><br><span class=\"line\">logger.addHandler(handler_file)</span><br><span class=\"line\">logger.addHandler(handler_error_file)</span><br><span class=\"line\"><span class=\"comment\"># log级别</span></span><br><span class=\"line\">logger.setLevel(logging.INFO)</span><br><span class=\"line\"><span class=\"comment\"># 进行记录</span></span><br><span class=\"line\">logger.debug(<span class=\"string\">'often makes a very good meal of %s'</span>, <span class=\"string\">'visiting tourists'</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现的需求\"><a href=\"#实现的需求\" class=\"headerlink\" title=\"实现的需求\"></a>实现的需求</h4><ol>\n<li>日志分割，使用RotatingFileHandler处理器设定了maxBytes，在日志文件大小为1M的时候就会将日志文件重命名为<strong>debug.log.1</strong>,然后新建一个<strong>debug.log</strong>,第二次的时候将<strong>debug.log.1</strong>-&gt;<strong>debug.log.2</strong>, 每次都会这样依次更改名字,直到日志文件数量到达backupCount的限制,将最老的一个删除以维持最多50个的日志文件。logging也可以使用时间分割</li>\n<li>日志文件的编码, 需要在处理器里面指定<code>encoding = &quot;UTF-8&quot;</code>来避免出现日志编码错误</li>\n<li>自定义时间，重写了formatter.formatTime来设定打印出来的时间始终是utc+8</li>\n<li>分级别输出，info以上的日志都会用handler_file输出到<strong>debug.log</strong>，error以上的日志都会输出到<strong>error.log</strong></li>\n</ol>\n<p>参考链接 <a href=\"http://pythonguidecn.readthedocs.io/zh/latest/writing/logging.html\" target=\"_blank\" rel=\"noopener\">日志（Logging） — The Hitchhiker’s Guide to Python</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>logging一共有三种4种配置形式</p>\n<ul>\n<li>基础型 baseconfig</li>\n<li>代码型</li>\n<li>字典型</li>\n<li>文件ini型</li>\n</ul>\n<p>只使用了代码型<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">custom_formatTime</span><span class=\"params\">(record, datefmt=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (datetime.datetime.utcnow() + datetime.timedelta(hours=<span class=\"number\">8</span>)).strftime(<span class=\"string\">u\"%Y-%m-%d %H:%M:%S\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过下面的方式进行简单配置输出方式与日志级别</span></span><br><span class=\"line\">logger = logging.getLogger(<span class=\"string\">\"binance_coin\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 写入日志文件</span></span><br><span class=\"line\">handler_file = logging.handlers\\</span><br><span class=\"line\">    .RotatingFileHandler(<span class=\"string\">\"logs/debug.log\"</span>, maxBytes=<span class=\"number\">1024</span>*<span class=\"number\">1024</span>, backupCount = <span class=\"number\">50</span>,encoding = <span class=\"string\">\"UTF-8\"</span>)<span class=\"comment\">#FileHandler(\"test.log\")</span></span><br><span class=\"line\">handler_file.setLevel(logging.INFO)</span><br><span class=\"line\">handler_error_file = logging.handlers\\</span><br><span class=\"line\">    .RotatingFileHandler(<span class=\"string\">\"logs/error.log\"</span>, maxBytes=<span class=\"number\">1024</span>*<span class=\"number\">1024</span>, backupCount = <span class=\"number\">10</span>,encoding = <span class=\"string\">\"UTF-8\"</span>)<span class=\"comment\">#FileHandler(\"test.log\")</span></span><br><span class=\"line\">handler_error_file.setLevel(logging.ERROR)</span><br><span class=\"line\"><span class=\"comment\"># 打印日志文件到console</span></span><br><span class=\"line\">handler_console = logging.StreamHandler()</span><br><span class=\"line\"><span class=\"comment\"># 格式化器</span></span><br><span class=\"line\">formatter = logging.Formatter(</span><br><span class=\"line\">    <span class=\"string\">\"%(asctime)s %(name)-12s %(levelname)-8s %(message)s\"</span>)</span><br><span class=\"line\">formatter.formatTime = custom_formatTime</span><br><span class=\"line\"><span class=\"comment\"># 添加格式化到控制器</span></span><br><span class=\"line\">handler_console.setFormatter(formatter)</span><br><span class=\"line\">handler_file.setFormatter(formatter)</span><br><span class=\"line\">handler_error_file.setFormatter(formatter)</span><br><span class=\"line\"><span class=\"comment\"># 添加处理器</span></span><br><span class=\"line\">logger.addHandler(handler_console)</span><br><span class=\"line\">logger.addHandler(handler_file)</span><br><span class=\"line\">logger.addHandler(handler_error_file)</span><br><span class=\"line\"><span class=\"comment\"># log级别</span></span><br><span class=\"line\">logger.setLevel(logging.INFO)</span><br><span class=\"line\"><span class=\"comment\"># 进行记录</span></span><br><span class=\"line\">logger.debug(<span class=\"string\">'often makes a very good meal of %s'</span>, <span class=\"string\">'visiting tourists'</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现的需求\"><a href=\"#实现的需求\" class=\"headerlink\" title=\"实现的需求\"></a>实现的需求</h4><ol>\n<li>日志分割，使用RotatingFileHandler处理器设定了maxBytes，在日志文件大小为1M的时候就会将日志文件重命名为<strong>debug.log.1</strong>,然后新建一个<strong>debug.log</strong>,第二次的时候将<strong>debug.log.1</strong>-&gt;<strong>debug.log.2</strong>, 每次都会这样依次更改名字,直到日志文件数量到达backupCount的限制,将最老的一个删除以维持最多50个的日志文件。logging也可以使用时间分割</li>\n<li>日志文件的编码, 需要在处理器里面指定<code>encoding = &quot;UTF-8&quot;</code>来避免出现日志编码错误</li>\n<li>自定义时间，重写了formatter.formatTime来设定打印出来的时间始终是utc+8</li>\n<li>分级别输出，info以上的日志都会用handler_file输出到<strong>debug.log</strong>，error以上的日志都会输出到<strong>error.log</strong></li>\n</ol>\n<p>参考链接 <a href=\"http://pythonguidecn.readthedocs.io/zh/latest/writing/logging.html\" target=\"_blank\" rel=\"noopener\">日志（Logging） — The Hitchhiker’s Guide to Python</a></p>\n"},{"title":"java环境变量","date":"2018-04-30T12:55:02.000Z","_content":"1. PATH里添加\n`%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;`\n\n2. 新建CLASSPTH,在里面添加\n`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;`\n\n3. 新建JAVA_HOME, 添加jdk路径\njava安装位置 比如`C:\\Program Files\\Java\\jdk1.8.0_172`\n\n**使用系统变量，不要在用户变量里操作**","source":"_posts/java环境变量.md","raw":"---\ntitle: java环境变量\ndate: 2018-04-30 20:55:02\ntags: java\n---\n1. PATH里添加\n`%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;`\n\n2. 新建CLASSPTH,在里面添加\n`.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;`\n\n3. 新建JAVA_HOME, 添加jdk路径\njava安装位置 比如`C:\\Program Files\\Java\\jdk1.8.0_172`\n\n**使用系统变量，不要在用户变量里操作**","slug":"java环境变量","published":1,"updated":"2018-05-14T01:50:49.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhljc1ou0003s4u6xe1xqftz","content":"<ol>\n<li><p>PATH里添加<br><code>%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</code></p>\n</li>\n<li><p>新建CLASSPTH,在里面添加<br><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n</li>\n<li><p>新建JAVA_HOME, 添加jdk路径<br>java安装位置 比如<code>C:\\Program Files\\Java\\jdk1.8.0_172</code></p>\n</li>\n</ol>\n<p><strong>使用系统变量，不要在用户变量里操作</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>PATH里添加<br><code>%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</code></p>\n</li>\n<li><p>新建CLASSPTH,在里面添加<br><code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n</li>\n<li><p>新建JAVA_HOME, 添加jdk路径<br>java安装位置 比如<code>C:\\Program Files\\Java\\jdk1.8.0_172</code></p>\n</li>\n</ol>\n<p><strong>使用系统变量，不要在用户变量里操作</strong></p>\n"},{"title":"Hello World","date":"2018-04-10T12:55:02.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-04-10 20:55:02\ntags:\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-05-14T01:50:06.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhljc1ow0004s4u6qx3qt8iw","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"spring boot实战1.5的集成测试","date":"2018-05-14T01:26:06.000Z","_content":"书中用的版本较早 有些变化 下面是readingList 基于Spring Boot 1.5的主页测试\n```java\npackage readinglist;\n\nimport org.hamcrest.Matchers;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringRunner.class) //不再使用SpringJUnit4ClassRunner.class\n@SpringBootTest //不再使用SpringApplicationConfiguration\n@AutoConfigureMockMvc //不需要下面的before了\npublic class MockMvcWebTests {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n//    @Before\n//    public void setupMockMvc(){\n//        mockMvc = MockMvcBuilders\n//                .webAppContextSetup(webApplicationContext)\n//                .build();\n//    }\n\n    @Test\n    public void homePage() throws Exception {\n        mockMvc.perform(get(\"/readingList/gao\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"readingList\"))\n                .andExpect(model().attributeExists(\"books\"))\n                .andExpect(model().attribute(\"books\",\n                        is(Matchers.empty())));\n    }\n}\n```\n代码清单4-3 测试提交一本新书 postBook\n[参考链接](\"https://segmentfault.com/a/1190000007397071\")","source":"_posts/spring-boot实战1-5的集成测试.md","raw":"---\ntitle: spring boot实战1.5的集成测试\ndate: 2018-05-14 09:26:06\ntags: spring\n---\n书中用的版本较早 有些变化 下面是readingList 基于Spring Boot 1.5的主页测试\n```java\npackage readinglist;\n\nimport org.hamcrest.Matchers;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@RunWith(SpringRunner.class) //不再使用SpringJUnit4ClassRunner.class\n@SpringBootTest //不再使用SpringApplicationConfiguration\n@AutoConfigureMockMvc //不需要下面的before了\npublic class MockMvcWebTests {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n//    @Before\n//    public void setupMockMvc(){\n//        mockMvc = MockMvcBuilders\n//                .webAppContextSetup(webApplicationContext)\n//                .build();\n//    }\n\n    @Test\n    public void homePage() throws Exception {\n        mockMvc.perform(get(\"/readingList/gao\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"readingList\"))\n                .andExpect(model().attributeExists(\"books\"))\n                .andExpect(model().attribute(\"books\",\n                        is(Matchers.empty())));\n    }\n}\n```\n代码清单4-3 测试提交一本新书 postBook\n[参考链接](\"https://segmentfault.com/a/1190000007397071\")","slug":"spring-boot实战1-5的集成测试","published":1,"updated":"2018-05-15T09:53:21.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhljc2um000as4u67nv5x0ra","content":"<p>书中用的版本较早 有些变化 下面是readingList 基于Spring Boot 1.5的主页测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> readinglist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.hamcrest.Matchers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.is;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class) <span class=\"comment\">//不再使用SpringJUnit4ClassRunner.class</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span> <span class=\"comment\">//不再使用SpringApplicationConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureMockMvc</span> <span class=\"comment\">//不需要下面的before了</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MockMvcWebTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Before</span></span><br><span class=\"line\"><span class=\"comment\">//    public void setupMockMvc()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        mockMvc = MockMvcBuilders</span></span><br><span class=\"line\"><span class=\"comment\">//                .webAppContextSetup(webApplicationContext)</span></span><br><span class=\"line\"><span class=\"comment\">//                .build();</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">homePage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        mockMvc.perform(get(<span class=\"string\">\"/readingList/gao\"</span>))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(view().name(<span class=\"string\">\"readingList\"</span>))</span><br><span class=\"line\">                .andExpect(model().attributeExists(<span class=\"string\">\"books\"</span>))</span><br><span class=\"line\">                .andExpect(model().attribute(<span class=\"string\">\"books\"</span>,</span><br><span class=\"line\">                        is(Matchers.empty())));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码清单4-3 测试提交一本新书 postBook<br><a href=\"&quot;https://segmentfault.com/a/1190000007397071&quot;\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>书中用的版本较早 有些变化 下面是readingList 基于Spring Boot 1.5的主页测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> readinglist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.hamcrest.Matchers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.is;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class) <span class=\"comment\">//不再使用SpringJUnit4ClassRunner.class</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span> <span class=\"comment\">//不再使用SpringApplicationConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureMockMvc</span> <span class=\"comment\">//不需要下面的before了</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MockMvcWebTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Before</span></span><br><span class=\"line\"><span class=\"comment\">//    public void setupMockMvc()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        mockMvc = MockMvcBuilders</span></span><br><span class=\"line\"><span class=\"comment\">//                .webAppContextSetup(webApplicationContext)</span></span><br><span class=\"line\"><span class=\"comment\">//                .build();</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">homePage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        mockMvc.perform(get(<span class=\"string\">\"/readingList/gao\"</span>))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(view().name(<span class=\"string\">\"readingList\"</span>))</span><br><span class=\"line\">                .andExpect(model().attributeExists(<span class=\"string\">\"books\"</span>))</span><br><span class=\"line\">                .andExpect(model().attribute(<span class=\"string\">\"books\"</span>,</span><br><span class=\"line\">                        is(Matchers.empty())));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码清单4-3 测试提交一本新书 postBook<br><a href=\"&quot;https://segmentfault.com/a/1190000007397071&quot;\">参考链接</a></p>\n"},{"title":"开源协议的区别","date":"2018-04-05T06:15:56.000Z","_content":"开源协议的区别\n\n#### GPL\n\nGPL（GNU General Public License），使用GPL开发的软件无论是修改后使用或者没有修改直接使用的开发后的软件源代码必须是开源的，不能用GPL授权的代码来做商业软件，具有传染性，极大增加了使用GPL的软件的数量。\n\n#### LGPL\nLGPL可以在不修改源代码的情况下进行引用，可以用来开发商业软件，如果修改了源代码，就必须将修改后的代码或者衍生出来的代码使用LGPL开放源代码。\n\n#### APL\n允许修改代码后再发布（不用开放源代码）。\n\n#### BSD\n允许他人修改和重新发布代码，可以在此基础上开发出商业软件进行销售。需要包含一份版权提示和免责声明。\n\n#### MIT\n最开放，协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。可以用于商业软件。\n\n参考了[开源许可协议GPL、APL、BSD、LGPL、MIT等的区别](http://www.splaybow.com/post/gpl-apl-difference.html)","source":"_posts/开源协议的区别.md","raw":"---\ntitle: 开源协议的区别\ndate: 2018-04-05 14:15:56\ntags:\n---\n开源协议的区别\n\n#### GPL\n\nGPL（GNU General Public License），使用GPL开发的软件无论是修改后使用或者没有修改直接使用的开发后的软件源代码必须是开源的，不能用GPL授权的代码来做商业软件，具有传染性，极大增加了使用GPL的软件的数量。\n\n#### LGPL\nLGPL可以在不修改源代码的情况下进行引用，可以用来开发商业软件，如果修改了源代码，就必须将修改后的代码或者衍生出来的代码使用LGPL开放源代码。\n\n#### APL\n允许修改代码后再发布（不用开放源代码）。\n\n#### BSD\n允许他人修改和重新发布代码，可以在此基础上开发出商业软件进行销售。需要包含一份版权提示和免责声明。\n\n#### MIT\n最开放，协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。可以用于商业软件。\n\n参考了[开源许可协议GPL、APL、BSD、LGPL、MIT等的区别](http://www.splaybow.com/post/gpl-apl-difference.html)","slug":"开源协议的区别","published":1,"updated":"2018-04-30T13:05:48.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhljc2up000bs4u6z6i4skso","content":"<p>开源协议的区别</p>\n<h4 id=\"GPL\"><a href=\"#GPL\" class=\"headerlink\" title=\"GPL\"></a>GPL</h4><p>GPL（GNU General Public License），使用GPL开发的软件无论是修改后使用或者没有修改直接使用的开发后的软件源代码必须是开源的，不能用GPL授权的代码来做商业软件，具有传染性，极大增加了使用GPL的软件的数量。</p>\n<h4 id=\"LGPL\"><a href=\"#LGPL\" class=\"headerlink\" title=\"LGPL\"></a>LGPL</h4><p>LGPL可以在不修改源代码的情况下进行引用，可以用来开发商业软件，如果修改了源代码，就必须将修改后的代码或者衍生出来的代码使用LGPL开放源代码。</p>\n<h4 id=\"APL\"><a href=\"#APL\" class=\"headerlink\" title=\"APL\"></a>APL</h4><p>允许修改代码后再发布（不用开放源代码）。</p>\n<h4 id=\"BSD\"><a href=\"#BSD\" class=\"headerlink\" title=\"BSD\"></a>BSD</h4><p>允许他人修改和重新发布代码，可以在此基础上开发出商业软件进行销售。需要包含一份版权提示和免责声明。</p>\n<h4 id=\"MIT\"><a href=\"#MIT\" class=\"headerlink\" title=\"MIT\"></a>MIT</h4><p>最开放，协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。可以用于商业软件。</p>\n<p>参考了<a href=\"http://www.splaybow.com/post/gpl-apl-difference.html\" target=\"_blank\" rel=\"noopener\">开源许可协议GPL、APL、BSD、LGPL、MIT等的区别</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>开源协议的区别</p>\n<h4 id=\"GPL\"><a href=\"#GPL\" class=\"headerlink\" title=\"GPL\"></a>GPL</h4><p>GPL（GNU General Public License），使用GPL开发的软件无论是修改后使用或者没有修改直接使用的开发后的软件源代码必须是开源的，不能用GPL授权的代码来做商业软件，具有传染性，极大增加了使用GPL的软件的数量。</p>\n<h4 id=\"LGPL\"><a href=\"#LGPL\" class=\"headerlink\" title=\"LGPL\"></a>LGPL</h4><p>LGPL可以在不修改源代码的情况下进行引用，可以用来开发商业软件，如果修改了源代码，就必须将修改后的代码或者衍生出来的代码使用LGPL开放源代码。</p>\n<h4 id=\"APL\"><a href=\"#APL\" class=\"headerlink\" title=\"APL\"></a>APL</h4><p>允许修改代码后再发布（不用开放源代码）。</p>\n<h4 id=\"BSD\"><a href=\"#BSD\" class=\"headerlink\" title=\"BSD\"></a>BSD</h4><p>允许他人修改和重新发布代码，可以在此基础上开发出商业软件进行销售。需要包含一份版权提示和免责声明。</p>\n<h4 id=\"MIT\"><a href=\"#MIT\" class=\"headerlink\" title=\"MIT\"></a>MIT</h4><p>最开放，协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。可以用于商业软件。</p>\n<p>参考了<a href=\"http://www.splaybow.com/post/gpl-apl-difference.html\" target=\"_blank\" rel=\"noopener\">开源许可协议GPL、APL、BSD、LGPL、MIT等的区别</a></p>\n"},{"title":"添加第二个git账号","date":"2018-05-25T05:13:39.000Z","_content":"\n1. 生成公钥私钥\n\n    ```\n    ssh-keygen -t rsa -C \"gaohubin.163.com\"  \n    ```\n        \n    输入**自定义**的文件名 id_rsa_lab，然后会生成两个文件**id_rsa_lab.pub**与**id_rsa_lab**\n    然后密码不输入直接回车两次，这样虽然有点不安全，但以后不用输密码了  \n\n2. 将公钥放入gitlab的SSH key的设置里，点击add key\n\n    ![](addkey.png)\n\n3. 在.ssh文件夹下面添加无后缀的config文件\n   \n    第一行是域名地址的别名  \n    第二行是IP 或者域名  \n    第三行是 用户名可以改  \n    第四行是 私钥位置  \n\n    ```\n    Host gitlab              \n    Hostname 202.182.104.28\n    User git\n    IdentityFile C:\\Users\\gao\\.ssh\\id_rsa_lab\n    ```\n参考: [一台电脑，两个及多个git账号配置](https://www.cnblogs.com/fanbi/p/7825746.html)","source":"_posts/添加第二个git账号.md","raw":"---\ntitle: 添加第二个git账号\ndate: 2018-05-25 13:13:39\ntags:\n---\n\n1. 生成公钥私钥\n\n    ```\n    ssh-keygen -t rsa -C \"gaohubin.163.com\"  \n    ```\n        \n    输入**自定义**的文件名 id_rsa_lab，然后会生成两个文件**id_rsa_lab.pub**与**id_rsa_lab**\n    然后密码不输入直接回车两次，这样虽然有点不安全，但以后不用输密码了  \n\n2. 将公钥放入gitlab的SSH key的设置里，点击add key\n\n    ![](addkey.png)\n\n3. 在.ssh文件夹下面添加无后缀的config文件\n   \n    第一行是域名地址的别名  \n    第二行是IP 或者域名  \n    第三行是 用户名可以改  \n    第四行是 私钥位置  \n\n    ```\n    Host gitlab              \n    Hostname 202.182.104.28\n    User git\n    IdentityFile C:\\Users\\gao\\.ssh\\id_rsa_lab\n    ```\n参考: [一台电脑，两个及多个git账号配置](https://www.cnblogs.com/fanbi/p/7825746.html)","slug":"添加第二个git账号","published":1,"updated":"2018-05-25T05:41:00.028Z","_id":"cjhljc2us000ds4u6fjerymuf","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>生成公钥私钥</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;gaohubin.163.com&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>输入**自定义**的文件名 id_rsa_lab，然后会生成两个文件**id_rsa_lab.pub**与**id_rsa_lab**\n然后密码不输入直接回车两次，这样虽然有点不安全，但以后不用输密码了  \n</code></pre><ol start=\"2\">\n<li><p>将公钥放入gitlab的SSH key的设置里，点击add key</p>\n<p> <img src=\"addkey.png\" alt=\"\"></p>\n</li>\n<li><p>在.ssh文件夹下面添加无后缀的config文件</p>\n<p> 第一行是域名地址的别名<br> 第二行是IP 或者域名<br> 第三行是 用户名可以改<br> 第四行是 私钥位置  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host gitlab              </span><br><span class=\"line\">Hostname 202.182.104.28</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile C:\\Users\\gao\\.ssh\\id_rsa_lab</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>参考: <a href=\"https://www.cnblogs.com/fanbi/p/7825746.html\" target=\"_blank\" rel=\"noopener\">一台电脑，两个及多个git账号配置</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>生成公钥私钥</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;gaohubin.163.com&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>输入**自定义**的文件名 id_rsa_lab，然后会生成两个文件**id_rsa_lab.pub**与**id_rsa_lab**\n然后密码不输入直接回车两次，这样虽然有点不安全，但以后不用输密码了  \n</code></pre><ol start=\"2\">\n<li><p>将公钥放入gitlab的SSH key的设置里，点击add key</p>\n<p> <img src=\"addkey.png\" alt=\"\"></p>\n</li>\n<li><p>在.ssh文件夹下面添加无后缀的config文件</p>\n<p> 第一行是域名地址的别名<br> 第二行是IP 或者域名<br> 第三行是 用户名可以改<br> 第四行是 私钥位置  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host gitlab              </span><br><span class=\"line\">Hostname 202.182.104.28</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile C:\\Users\\gao\\.ssh\\id_rsa_lab</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>参考: <a href=\"https://www.cnblogs.com/fanbi/p/7825746.html\" target=\"_blank\" rel=\"noopener\">一台电脑，两个及多个git账号配置</a></p>\n"},{"title":"使用Travis进行hexo的持续集成","date":"2018-04-30T12:56:33.000Z","_content":"\n1. 由于hexo会将项目重写，所以要在github.io上面创建一个dev分支来放代码，而master用来放默认的静态页面\n2. 在github的设置页面的Developer settings里面选择Personal access tokens,然后新建一个token，权限选择repo的所有权限\n3. 在travis里面开启项目的集成，在设置里面勾选Build only if .travis.yml is present，然后创建一个Environment Variables，把上一步的token放进去\n4. 编写 **.travis.yml**\n```\nlanguage: node_js  #设置语言\n\nnode_js: \n- 8.11  #设置相应的版本\n\ncache:\n    apt: true\n    directories:\n        - node_modules # 缓存不经常更改的内容\n\nbefore_install:\n- npm install -g hexo-cli\n\ninstall:\n- npm install\n\n# 这一步是执行,其他的都是环境\nscript:\n- hexo clean\n- hexo generate\n\nbranches:\n  only:\n    - hexo  #只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置\n\nafter_script:\n  - cd ./public\n  - git init\n  - git config --global user.name \"xigaohu\"\n  - git config --global user.email \"xigaohu@163.com\"\n  - git add .\n  - git commit -m \"update by travis\"\n  - git push --force --quiet \"https://${REP_TOKEN}@github.com/xigaohu/xigaohu.github.io.git\" master:master\n```\n\n**注意看travis里面的job日志，有三角形符号的说明可以展开**\n\n最后点击页面的 build unknown 把链接加入readme里面获取徽章\n\n> todo:目前静态文件的版本只能保存一个  \n> todo: 没有使用hexo d进行发布","source":"_posts/使用Travis进行hexo的持续集成.md","raw":"---\ntitle: 使用Travis进行hexo的持续集成\ndate: 2018-04-30 20:56:33\ntags: 持续集成\n---\n\n1. 由于hexo会将项目重写，所以要在github.io上面创建一个dev分支来放代码，而master用来放默认的静态页面\n2. 在github的设置页面的Developer settings里面选择Personal access tokens,然后新建一个token，权限选择repo的所有权限\n3. 在travis里面开启项目的集成，在设置里面勾选Build only if .travis.yml is present，然后创建一个Environment Variables，把上一步的token放进去\n4. 编写 **.travis.yml**\n```\nlanguage: node_js  #设置语言\n\nnode_js: \n- 8.11  #设置相应的版本\n\ncache:\n    apt: true\n    directories:\n        - node_modules # 缓存不经常更改的内容\n\nbefore_install:\n- npm install -g hexo-cli\n\ninstall:\n- npm install\n\n# 这一步是执行,其他的都是环境\nscript:\n- hexo clean\n- hexo generate\n\nbranches:\n  only:\n    - hexo  #只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置\n\nafter_script:\n  - cd ./public\n  - git init\n  - git config --global user.name \"xigaohu\"\n  - git config --global user.email \"xigaohu@163.com\"\n  - git add .\n  - git commit -m \"update by travis\"\n  - git push --force --quiet \"https://${REP_TOKEN}@github.com/xigaohu/xigaohu.github.io.git\" master:master\n```\n\n**注意看travis里面的job日志，有三角形符号的说明可以展开**\n\n最后点击页面的 build unknown 把链接加入readme里面获取徽章\n\n> todo:目前静态文件的版本只能保存一个  \n> todo: 没有使用hexo d进行发布","slug":"使用Travis进行hexo的持续集成","published":1,"updated":"2018-05-14T01:50:41.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhljc2uu000es4u6ndlw7eg9","content":"<ol>\n<li>由于hexo会将项目重写，所以要在github.io上面创建一个dev分支来放代码，而master用来放默认的静态页面</li>\n<li>在github的设置页面的Developer settings里面选择Personal access tokens,然后新建一个token，权限选择repo的所有权限</li>\n<li>在travis里面开启项目的集成，在设置里面勾选Build only if .travis.yml is present，然后创建一个Environment Variables，把上一步的token放进去</li>\n<li>编写 <strong>.travis.yml</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js  #设置语言</span><br><span class=\"line\"></span><br><span class=\"line\">node_js: </span><br><span class=\"line\">- 8.11  #设置相应的版本</span><br><span class=\"line\"></span><br><span class=\"line\">cache:</span><br><span class=\"line\">    apt: true</span><br><span class=\"line\">    directories:</span><br><span class=\"line\">        - node_modules # 缓存不经常更改的内容</span><br><span class=\"line\"></span><br><span class=\"line\">before_install:</span><br><span class=\"line\">- npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\">install:</span><br><span class=\"line\">- npm install</span><br><span class=\"line\"></span><br><span class=\"line\"># 这一步是执行,其他的都是环境</span><br><span class=\"line\">script:</span><br><span class=\"line\">- hexo clean</span><br><span class=\"line\">- hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - hexo  #只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  - cd ./public</span><br><span class=\"line\">  - git init</span><br><span class=\"line\">  - git config --global user.name &quot;xigaohu&quot;</span><br><span class=\"line\">  - git config --global user.email &quot;xigaohu@163.com&quot;</span><br><span class=\"line\">  - git add .</span><br><span class=\"line\">  - git commit -m &quot;update by travis&quot;</span><br><span class=\"line\">  - git push --force --quiet &quot;https://$&#123;REP_TOKEN&#125;@github.com/xigaohu/xigaohu.github.io.git&quot; master:master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>注意看travis里面的job日志，有三角形符号的说明可以展开</strong></p>\n<p>最后点击页面的 build unknown 把链接加入readme里面获取徽章</p>\n<blockquote>\n<p>todo:目前静态文件的版本只能保存一个<br>todo: 没有使用hexo d进行发布</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>由于hexo会将项目重写，所以要在github.io上面创建一个dev分支来放代码，而master用来放默认的静态页面</li>\n<li>在github的设置页面的Developer settings里面选择Personal access tokens,然后新建一个token，权限选择repo的所有权限</li>\n<li>在travis里面开启项目的集成，在设置里面勾选Build only if .travis.yml is present，然后创建一个Environment Variables，把上一步的token放进去</li>\n<li>编写 <strong>.travis.yml</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js  #设置语言</span><br><span class=\"line\"></span><br><span class=\"line\">node_js: </span><br><span class=\"line\">- 8.11  #设置相应的版本</span><br><span class=\"line\"></span><br><span class=\"line\">cache:</span><br><span class=\"line\">    apt: true</span><br><span class=\"line\">    directories:</span><br><span class=\"line\">        - node_modules # 缓存不经常更改的内容</span><br><span class=\"line\"></span><br><span class=\"line\">before_install:</span><br><span class=\"line\">- npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\">install:</span><br><span class=\"line\">- npm install</span><br><span class=\"line\"></span><br><span class=\"line\"># 这一步是执行,其他的都是环境</span><br><span class=\"line\">script:</span><br><span class=\"line\">- hexo clean</span><br><span class=\"line\">- hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - hexo  #只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  - cd ./public</span><br><span class=\"line\">  - git init</span><br><span class=\"line\">  - git config --global user.name &quot;xigaohu&quot;</span><br><span class=\"line\">  - git config --global user.email &quot;xigaohu@163.com&quot;</span><br><span class=\"line\">  - git add .</span><br><span class=\"line\">  - git commit -m &quot;update by travis&quot;</span><br><span class=\"line\">  - git push --force --quiet &quot;https://$&#123;REP_TOKEN&#125;@github.com/xigaohu/xigaohu.github.io.git&quot; master:master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>注意看travis里面的job日志，有三角形符号的说明可以展开</strong></p>\n<p>最后点击页面的 build unknown 把链接加入readme里面获取徽章</p>\n<blockquote>\n<p>todo:目前静态文件的版本只能保存一个<br>todo: 没有使用hexo d进行发布</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/添加第二个git账号/addkey.png","slug":"addkey.png","post":"cjhljc2us000ds4u6fjerymuf","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjhljc1o80000s4u6j2d7avqt","tag_id":"cjhljc1or0002s4u6gq4zutvv","_id":"cjhljc1p20006s4u6wx14voce"},{"post_id":"cjhljc1ob0001s4u6l4kjm78m","tag_id":"cjhljc1or0002s4u6gq4zutvv","_id":"cjhljc1p40008s4u64jwlghza"},{"post_id":"cjhljc1ou0003s4u6xe1xqftz","tag_id":"cjhljc1p30007s4u6v6jm172d","_id":"cjhljc1p50009s4u67jcg86k8"},{"post_id":"cjhljc2um000as4u67nv5x0ra","tag_id":"cjhljc2ur000cs4u6691dmtdh","_id":"cjhljc2uy000gs4u6wvyquld9"},{"post_id":"cjhljc2uu000es4u6ndlw7eg9","tag_id":"cjhljc2uy000fs4u67pk6v7fk","_id":"cjhljc2uz000hs4u678j6gxzi"}],"Tag":[{"name":"python","_id":"cjhljc1or0002s4u6gq4zutvv"},{"name":"java","_id":"cjhljc1p30007s4u6v6jm172d"},{"name":"spring","_id":"cjhljc2ur000cs4u6691dmtdh"},{"name":"持续集成","_id":"cjhljc2uy000fs4u67pk6v7fk"}]}}