<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://stoneskipping.info</id>
    <title>xiaohu</title>
    <updated>2020-01-21T03:39:53.548Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://stoneskipping.info"/>
    <link rel="self" href="http://stoneskipping.info/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://stoneskipping.info/images/avatar.png</logo>
    <icon>http://stoneskipping.info/favicon.ico</icon>
    <rights>All rights reserved 2020, xiaohu</rights>
    <entry>
        <title type="html"><![CDATA[python30个技巧]]></title>
        <id>http://stoneskipping.info/post/python30-ge-ji-qiao</id>
        <link href="http://stoneskipping.info/post/python30-ge-ji-qiao">
        </link>
        <updated>2020-01-21T02:56:29.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>原文 https://towardsdatascience.com/30-python-best-practices-tips-and-tricks-caefb9f8c5f5</p>
</blockquote>
<p>随着假期的过去，我们大部分人已经返回到了工作中。这里有30个Python最佳实践技巧，虽然需要花点时间，但我肯定在这过程中仍然可以学到一些有用的东西。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>原文 https://towardsdatascience.com/30-python-best-practices-tips-and-tricks-caefb9f8c5f5</p>
</blockquote>
<p>随着假期的过去，我们大部分人已经返回到了工作中。这里有30个Python最佳实践技巧，虽然需要花点时间，但我肯定在这过程中仍然可以学到一些有用的东西。</p>
<!-- more -->
<p>随着假期的过去，我们大部分人已经返回到了工作中。这里有30个Python最佳实践技巧，虽然需要花点时间，但我肯定在这过程中仍然可以学到一些有用的东西。</p>
<h3 id="用python3">用Python3</h3>
<p>提醒你：Python2将在2020年1月1日后，不再提供官方支持，这个向导有些例子只能用于Python3，如果你仍然在使用Python2.7，现在就升级吧。</p>
<p>如果你使用的MacOS，你可以使用Homebrew进行升级</p>
<h3 id="检查所需的最小版本python">检查所需的最小版本Python</h3>
<p>你可以在代码里检查Python的版本，确认你的用户没有使用不兼容的版本运行你的脚本，做个简单的检查</p>
<pre><code class="language-python">if not sys.version_info &gt; (2, 7):
   # berate your user for running a 10 year
   # python version
elif not sys.version_info &gt;= (3, 5):
   # Kindly tell your user (s)he needs to upgrade
   # because you're using 3.5 features
</code></pre>
<h3 id="使用ipython">使用IPython</h3>
<p>IPython是基于增强的shell，它除了自动补全，还有更多的功能，我喜欢它内置的魔术命令，下面有一些</p>
<ul>
<li><code>%cd</code> 改变当前工作目录</li>
<li><code>%edit</code> 打开编辑器，关闭编辑器后立刻执行输入的代码</li>
<li><code>%env</code> 展示当前的环境变量</li>
<li><code>%pip install [pkgs]</code> 不需要离开shell就可以安装包</li>
<li><code>%time</code> 和 <code>%timeit</code> 显示python代码的执行时间</li>
</ul>
<p>另外一个有用的特性是引用了之前输出的命令，<strong>In</strong>和<strong>Out</strong>是确切的对象，你可以使用<code>Out[3]</code>来输出第三个命令的执行结果</p>
<p>安装IPython <code>pip3 install ipython</code></p>
<h3 id="列表推导list-comprehensions">列表推导（List Comprehensions）</h3>
<p>列表推导能够代替丑陋的循环来填充list，列表推导的基础语法为</p>
<pre><code class="language-python">[ expression for item in list if conditional ]
</code></pre>
<p>一个简单的例子，给列表顺序填充数字</p>
<pre><code class="language-python">mylist = [i for i in range(10)]
print(mylist)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>因为你可以使用表达式，所以你也可以做一些数学运算</p>
<pre><code class="language-python">squares = [x**2 for x in range(10)]
print(squares)
# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</code></pre>
<p>甚至可以调用额外的函数</p>
<pre><code class="language-python">def some_function(a):
    return (a + 5) / 2
    
my_formula = [some_function(i) for i in range(10)]
print(my_formula)
# [2, 3, 3, 4, 4, 5, 5, 6, 6, 7]
</code></pre>
<p>最后，你可以使用<code>if</code>过滤列表，在下面例子里我们保留能被2整除的数字</p>
<pre><code class="language-python">filtered = [i for i in range(20) if i%2==0]
print(filtered)
# [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</code></pre>
<h3 id="检查对象的内存使用情况">检查对象的内存使用情况</h3>
<p>使用<code>sys.getsizeof()</code>你可以检查某个对象的内存使用情况</p>
<pre><code class="language-python">import sys

mylist = range(0, 10000)
print(sys.getsizeof(mylist))
# 48
</code></pre>
<p>等等..为什么这么大的列表只用了48个字节</p>
<p>这是因为range函数只是返回一个表现像list的类，range比确切的数字列表有更好的内存效率</p>
<p>你可以使用列表推导来创建一个实际的数字list来查看</p>
<pre><code class="language-python">import sys

myreallist = [x for x in range(0, 10000)]
print(sys.getsizeof(myreallist))
# 87632
</code></pre>
<h3 id="返回多个值">返回多个值</h3>
<p>在Python的函数里，不需要借助字典、list或者class就可以返回多个值，例如</p>
<pre><code class="language-python">def get_user(id):
    # fetch user from database
    # ....
    return name, birthdate

name, birthdate = get_user(4)
</code></pre>
<p>返回多少值都没有关系，但是超过3个值都应该放到数据类型里面</p>
<h3 id="使用数据类data-classes">使用数据类(data classes)</h3>
<p>Python在3.7后提供了数据类，它相比于普通类有一些优点，比如返回多个值或者字典</p>
<ul>
<li>数据类代码量少</li>
<li>数据类可以比较，因为继承了<code>__eq__</code>方法</li>
<li>在调试中可以很简单的打印出一个数据类，因为<code>__repr__</code>也被继承了</li>
<li>数据类有输入提示，减少出错的机率</li>
</ul>
<p>数据类的例子</p>
<pre><code class="language-python">from dataclasses import dataclass

@dataclass
class Card:
    rank: str
    suit: str
    
card = Card(&quot;Q&quot;, &quot;hearts&quot;)

print(card == card)
# True

print(card.rank)
# 'Q'

print(card)
Card(rank='Q', suit='hearts')
</code></pre>
<h3 id="变量原地交换">变量原地交换</h3>
<p>一个小技巧，可以减少代码行数</p>
<pre><code class="language-python">a = 1
b = 2
a, b = b, a
print (a)
# 2
print (b)
# 1
</code></pre>
<h3 id="合并字典python-35">合并字典(Python 3.5+)</h3>
<p>Python3.5后，合并字典变得更简单了</p>
<pre><code class="language-python">dict1 = { 'a': 1, 'b': 2 }
dict2 = { 'b': 3, 'c': 4 }
merged = { **dict1, **dict2 }
print (merged)
# {'a': 1, 'b': 3, 'c': 4}
</code></pre>
<p>如果有重复的keys，第一个字典的key值将会被重写</p>
<h3 id="字符串的标题写法">字符串的标题写法</h3>
<p>这是语法糖的一个</p>
<pre><code class="language-python">mystring = &quot;10 awesome python tricks&quot;
print(mystring.title())
'10 Awesome Python Tricks'
</code></pre>
<h3 id="拆分字符串转成list">拆分字符串转成list</h3>
<p>你可以拆分字符串，然后转成string列表，在这个例子中，我们通过空格拆分</p>
<pre><code class="language-python">mystring = &quot;The quick brown fox&quot;
mylist = mystring.split(' ')
print(mylist)
# ['The', 'quick', 'brown', 'fox']
</code></pre>
<h3 id="从string列表创建string">从string列表创建string</h3>
<p>和前面的技巧相反，string列表中每两个string之间放空格，最终转换为一个字符串</p>
<pre><code class="language-python">mylist = ['The', 'quick', 'brown', 'fox']
mystring = &quot; &quot;.join(mylist)
print(mystring)
# 'The quick brown fox'
</code></pre>
<p>如果你在想为什么不是<code>mylist.join(&quot; &quot;)</code>，好问题！</p>
<p>这是因为<code>String.join()</code>方法不仅可以使用在list上面，也可以在任何可迭代对象上面。放在String的函数里面可以适用于多个地方。</p>
<h3 id="emoji">Emoji</h3>
<p>这一个要么令人印象深刻，要么让人排斥，取决于你怎么看待的。一个重要的事实是它可以在社交媒体分析上用到。</p>
<p>安装emoji模块</p>
<pre><code class="language-python">pip install emoji
</code></pre>
<p>安装后，你可以下面的用法</p>
<pre><code class="language-python">import emoji
result = emoji.emojize('Python is :thumbs_up:')
print(result)
# 'Python is 👍'

# You can also reverse this:
result = emoji.demojize('Python is 👍')
print(result)
# 'Python is :thumbs_up:'
</code></pre>
<h3 id="列表切片">列表切片</h3>
<p>列表切片的基础语法为</p>
<pre><code class="language-python">a[start:stop:step]
</code></pre>
<p><code>start</code>,<code>stop</code>和<code>step</code>都是可选的，如果你不填，默认为</p>
<ul>
<li>start默认为0</li>
<li>end默认为字符串的结尾位置</li>
<li>step默认为1</li>
</ul>
<p>例子</p>
<pre><code class="language-python"># We can easily create a new list from 
# the first two elements of a list:
first_two = [1, 2, 3, 4, 5][0:2]
print(first_two)
# [1, 2]

# And if we use a step value of 2, 
# we can skip over every second number
# like this:
steps = [1, 2, 3, 4, 5][0:5:2]
print(steps)
# [1, 3, 5]

# This works on strings too. In Python,
# you can treat a string like a list of
# letters:
mystring = &quot;abcdefdn nimt&quot;[::2]
print(mystring)
# 'aced it'
</code></pre>
<h3 id="反转字符串和列表">反转字符串和列表</h3>
<p>你可以使用上面说到的切片来反转字符串或者list，通过设置step成负数值-1，元素就可以被反转</p>
<pre><code class="language-python">revstring = &quot;abcdefg&quot;[::-1]
print(revstring)
# 'gfedcba'

revarray = [1, 2, 3, 4, 5][::-1]
print(revarray)
# [5, 4, 3, 2, 1]
</code></pre>
<p>###显示图片</p>
<p>我终于发现一个借口可以在我的文章里面加入猫，你可能会用它显示图形或者其他的，首先，安装Pillow，这是Python Image Library的一个fork</p>
<pre><code class="language-python">pip3 install Pillow
</code></pre>
<p>现在可以下载一个叫做kittens.jpg的图片</p>
<p>你可以使用下面的代码去显示图片</p>
<pre><code class="language-python">from PIL import Image

im = Image.open(&quot;kittens.jpg&quot;)
im.show()
print(im.format, im.size, im.mode)
# JPEG (1920, 1357) RGB
</code></pre>
<p>你也可以在IPython中使用</p>
<p>Pillow不仅可以显示图片，还可以分析，转换大小，过滤，增强，变形等等。</p>
<h3 id="使用map">使用map()</h3>
<p><code>map()</code>是Python的内建函数，<code>map()</code>的语法为</p>
<pre><code class="language-python">map(function, something_iterable)
</code></pre>
<p>所以你可以给它一个函数或者其他的去执行，它能够处理任何的可迭代对象。下面的例子里我用的list</p>
<pre><code class="language-python">def upper(s):
    return s.upper()
    
mylist = list(map(upper, ['sentence', 'fragment']))
print(mylist)
# ['SENTENCE', 'FRAGMENT']

# Convert a string representation of
# a number into a list of ints.
list_of_ints = list(map(int, &quot;1234567&quot;)))
print(list_of_ints)
# [1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>查看你的代码，看有没有什么地方可以用<code>map()</code>来替换循环</p>
<h3 id="从列表和字符串获取不重复的元素">从列表和字符串获取不重复的元素</h3>
<p>通过用<code>set()</code>创建一个集合，你能从列表或类列表对象里面得到所有的不重复元素</p>
<pre><code class="language-python">mylist = [1, 1, 2, 3, 4, 5, 5, 5, 6, 6]
print (set(mylist))
# {1, 2, 3, 4, 5, 6}

# And since a string can be treated like a 
# list of letters, you can also get the 
# unique letters from a string this way:
print (set(&quot;aaabbbcccdddeeefff&quot;))
# {'a', 'b', 'c', 'd', 'e', 'f'}
</code></pre>
<h3 id="发现出现次数最多的元素">发现出现次数最多的元素</h3>
<p>从列表和字符串发现出现次数最多的元素</p>
<pre><code class="language-python">test = [1, 2, 3, 4, 2, 2, 3, 1, 4, 4, 4]
print(max(set(test), key = test.count))
</code></pre>
<p>你理解这是怎么工作的吗？在继续阅读前尝试自己理解一下</p>
<ul>
<li><code>max()</code>将会返回list里面最大的值，<code>key</code>参数用来传入一个简单的排序函数，在这个例子里，是<code>test.count</code>，这个函数作用于可迭代对象里面的每一条目。</li>
<li><code>test.count</code>是一个列表的内置函数，它接收一个参数，然后统计这个参数的出现次数，所以<code>test.count(1)</code>将会返回2，<code>test.count</code>将会返回4</li>
<li>set(test)返回test中的所有不重复值，是{1,2,3,4}</li>
</ul>
<p>所以在这一行代码里面，我们获取test的所有不重复的值{1,2,3,4}，然后max调用<code>list.count</code>函数，返回最大的值</p>
<h3 id="创建进度条">创建进度条</h3>
<p>你可以自己创建进度条，这也很有趣，但是如果你用_progress_包的话会更快</p>
<p><code>pip3 install progress</code></p>
<p>现在你可以轻易的创建进度条</p>
<pre><code class="language-python">from progress.bar import Bar

bar = Bar('Processing', max=20)
for i in range(20):
    # Do some work
    bar.next()
bar.finish()
</code></pre>
<p>下面的动画展示了所有可用的进度条类型</p>
<figure data-type="image" tabindex="1"><img src="https://tencent-1256324020.cos.ap-shanghai.myqcloud.com/20200119175403.png" alt="" loading="lazy"></figure>
<p>###在交互界面使用下划线</p>
<p>你可以用下划线获得最近一次的执行结果，例如在IPython中：</p>
<pre><code>In [1]: 3 * 3
Out[1]: 9
In [2]: _ + 3
Out[2]: 12
</code></pre>
<p>在Python命令行里面也可以用，另外，IPython命令行允许你使用<code>Out[n]</code>去获取<code>In[n]</code>的执行结果，例如在上面的例子里，<code>Out[1]</code>将会获取到9</p>
<h3 id="快速创建一个web服务器">快速创建一个web服务器</h3>
<p>你可以创建一个web服务器，提供当前目录的内容</p>
<pre><code>python3 -m http.server
</code></pre>
<p>如果你想和同事分享东西或者测试简单的Html站点的时候，这是非常有用的</p>
<h3 id="多行字符串">多行字符串</h3>
<p>虽然在代码里你可以用三个引号将多行的字符串包起来，但是这并不理想，你放在多行字符串的所有内容包括格式化也会变成字符串。</p>
<p>我更推荐第二种方式，这可以连接多行字符串，也允许你进行格式化。唯一的缺点是你需要显式的添加换行符</p>
<pre><code class="language-python">
s1 = &quot;&quot;&quot;Multi line strings can be put
        between triple quotes. It's not ideal
        when formatting your code though&quot;&quot;&quot;

print (s1)
# Multi line strings can be put
#         between triple quotes. It's not ideal
#         when formatting your code though
        
s2 = (&quot;You can also concatenate multiple\n&quot; +
        &quot;strings this way, but you'll have to\n&quot;
        &quot;explicitly put in the newlines&quot;)

print(s2)
# You can also concatenate multiple
# strings this way, but you'll have to
# explicitly put in the newlines
</code></pre>
<h3 id="带有条件的三元操作符">带有条件的三元操作符</h3>
<p>这是另一种使你的代码更简洁的同时保持可读性的方法</p>
<pre><code class="language-python">[on_true] if [expression] else [on_false]
</code></pre>
<pre><code class="language-python">x = &quot;Success!&quot; if (y == 2) else &quot;Failed!&quot;
</code></pre>
<h3 id="统计出现次数">统计出现次数</h3>
<p>你可以使用<code>collections</code>库里面的<code>Counter</code>去统计一个列表里面的元素出现次数，这将返回一个字典</p>
<pre><code class="language-python">from collections import Counter

mylist = [1, 1, 2, 3, 4, 5, 5, 5, 6, 6]
c = Counter(mylist)
print(c)
# Counter({1: 2, 2: 1, 3: 1, 4: 1, 5: 3, 6: 2})

# And it works on strings too:
print(Counter(&quot;aaaaabbbbbccccc&quot;))
# Counter({'a': 5, 'b': 5, 'c': 5})
</code></pre>
<p>###比较链</p>
<p>你可以使用比较链来创建更简洁可读的代码</p>
<pre><code class="language-python">
x = 10

# Instead of:
if x &gt; 5 and x &lt; 15:
    print(&quot;Yes&quot;)
# yes

# You can also write:
if 5 &lt; x &lt; 15:
    print(&quot;Yes&quot;)
# Yes
</code></pre>
<h3 id="添加颜色">添加颜色</h3>
<p>使用Colorama，你可以在terminal里面添加颜色</p>
<pre><code class="language-python">from colorama import Fore, Back, Style

print(Fore.RED + 'some red text')
print(Back.GREEN + 'and with a green background')
print(Style.DIM + 'and in dim text')
print(Style.RESET_ALL)
print('back to normal now')
</code></pre>
<p>###处理日期</p>
<p>python-dateutil模块提供笔标准库更加强大的日期处理，安装：</p>
<pre><code class="language-shell">pip3 install python-dateutil 
</code></pre>
<p>你可以做很多事情，我将下面的例子限定为我发现特别有用的：log文件的模糊日期解析</p>
<pre><code class="language-python">from dateutil.parser import parse

logline = 'INFO 2020-01-01T00:00:01 Happy new year, human.'
timestamp = parse(log_line, fuzzy=True)
print(timestamp)
# 2020-01-01 00:00:01
</code></pre>
<p>记得：如果Python的datetime不行的时候，就用python-dateutil</p>
<h3 id="整除">整除</h3>
<p>在Python2里面，除法操作符<code>/</code>默认就是整除，除非有一个操作数是浮点型，如下</p>
<pre><code class="language-python"># Python 2
5 / 2 = 2
5 / 2.0 = 2.5
</code></pre>
<p>在Python3里面，除法操作符默认就是浮点除法，<code>//</code>操作符变成了整除，如下</p>
<pre><code class="language-python">Python 3
5 / 2 = 2.5
5 // 2 = 2
</code></pre>
<p>想了解这一变化的来龙去脉，你可以读<a href="https://www.python.org/dev/peps/pep-0238/">PEP-0238</a></p>
<p>###用chardet做编码检测</p>
<p>你可以使用chardet模块检测一个文件的编码格式，这是一个分析未知文本的有用方法，安装方式：</p>
<pre><code>pip install chardet
</code></pre>
<p>你现在有了一个额外的命令行工具<code>chardet</code>，你可以这样使用：</p>
<pre><code class="language-shell">chardetect somefile.txt
somefile.txt: ascii with confidence 1.0
</code></pre>
<p>你可以在编程里使用，<a href="https://chardet.readthedocs.io/en/latest/usage.html">查看文档</a></p>
<p>这就是新年开始的Python30个技巧，我希望你和我一样的喜欢它，如果你有想添加的，欢迎留言。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>http://stoneskipping.info/post/about</id>
        <link href="http://stoneskipping.info/post/about">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<p>博客</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>xiaohu</p>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<p>coding</p>
<h2 id="联系我呀">📬 联系我呀</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[spring boot自定义配置文件]]></title>
        <id>http://stoneskipping.info/post/spring-boot自定义配置文件</id>
        <link href="http://stoneskipping.info/post/spring-boot自定义配置文件">
        </link>
        <updated>2018-09-10T08:04:50.000Z</updated>
        <content type="html"><![CDATA[<p>配置类</p>
<pre><code class="language-java">@Data
@Component
@ConfigurationProperties(prefix = &quot;coin.stc&quot;)
@PropertySource(&quot;classpath:config/coins.properties&quot;)
public class StcProperties {
    /**
     * 协议
     */
    private String protocol;
    /**
     * 主机
     */
    private String host;
    /**
     * 端口
     */
    private String port;
    /**
     * token
     */
    private String accesstoken;

}
</code></pre>
<p>配置文件<code>config/coins.properties</code></p>
<pre><code class="language-ini"># stc
coin.stc.protocol = http
coin.stc.host = 192.168.102.246
coin.stc.port = 50011
coin.stc.accesstoken = 86349b9c59f85a97f2bbce808d200d60
</code></pre>
<p>使用下面方式使自定义配置文件使用profile</p>
<pre><code class="language-java">@PropertySource(&quot;classpath:config/coins${spring.profiles.active}.properties&quot;)
</code></pre>
<p>测试配置是否导入</p>
<pre><code class="language-java">@RunWith(SpringRunner.class)
@SpringBootTest
public class StcJSONRPCClientTest {

    @Autowired
    private StcProperties stcProperties;

    @Test
    public void getClient() {
        System.out.println(stcProperties.getAccesstoken());
        assertEquals(&quot;86349b9c59f85a97f2bbce808d200d60&quot;,stcProperties.getAccesstoken());
    }
}
</code></pre>
<p>参考<br>
<a href="https://stackoverflow.com/questions/43179240/how-to-add-profile-specific-properties-files-when-i-have-custom-name-to-my-prope">*<strong>How to add profile specific properties files when I have custom name to my property file</strong></a><br>
<a href="https://stackoverflow.com/questions/38042035/springboot-not-loading-application-dev-properties-file">Springboot not loading application.dev.properties file<br>
</a><br>
<a href="https://blog.csdn.net/zsl129/article/details/52880798">Springboot 之 自定义配置文件及读取配置文件</a><br>
<a href="https://stackoverflow.com/questions/41263105/how-to-load-property-file-based-on-spring-profiles">*<strong>How to load property file based on spring profiles</strong></a><br>
<a href="https://blog.csdn.net/qq_29614459/article/details/71486708">SpringBoot 读取配置文件及profiles切换配置文件</a><br>
<a href="https://juejin.im/post/5a9be3cb51882555627cbc1f">*<strong>深入Spring Boot (三)：Properties属性配置文件使用详解</strong></a><br>
<a href="https://blog.csdn.net/u012100371/article/details/78081634">spring boot 多环境配置读取属性文件</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native遇到的坑]]></title>
        <id>http://stoneskipping.info/post/react-native遇到的坑</id>
        <link href="http://stoneskipping.info/post/react-native遇到的坑">
        </link>
        <updated>2018-08-30T23:29:53.000Z</updated>
        <summary type="html"><![CDATA[<ol>
<li>andorid的文件里面需要添加local.properties <a href="https://stackoverflow.com/questions/32634352/react-native-android-build-failed-sdk-location-not-found">链接</a></li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<ol>
<li>andorid的文件里面需要添加local.properties <a href="https://stackoverflow.com/questions/32634352/react-native-android-build-failed-sdk-location-not-found">链接</a></li>
</ol>
<!-- more -->
<pre><code>```
1. Go to your React native Project -&gt; Android
2. Create a file local.properties
3. Open the file
4. paste your Android SDK path like below

in Windows sdk.dir = C:\\Users\\USERNAME\\AppData\\Local\\Android\\sdk
in macOS sdk.dir = /Users/USERNAME/Library/Android/sdk
in linux sdk.dir = /home/USERNAME/Android/Sdk
Replace USERNAME with your user name
```
</code></pre>
<ol start="2">
<li><s>先用AS创建一个hello world应用，否则会出现<code>Building and installing the app on the device (cd android &amp;&amp; gradlew.bat installDebug</code>然后开始下载gradle，但是因为网络问题，一直无法下载完成</s>不清楚什么原因，第一天一直无法下载完成，但是第二天用AS创建一个项目后，一会就下载完成了，可能之间没有关系</li>
<li>如果遇到 <code>http://localhost:8081</code> 502的错误,可能是因为开了代理的问题,代理无法识别<code>localhost</code>作为直接代理</li>
<li>远程调试可能需要修改Dev settings &gt; Debug server host &amp; port for device和执行命令<code>adb reverse tcp:8081 tcp:8081</code></li>
<li>使用 <code>npm i -g typescript</code>和<code>npm install @types/react-native</code>后可以使用自动导入(vscode)</li>
<li>添加<code>.npmrc</code>文件并使用以下配置来加快速度<pre><code>sass_binary_site=https://npm.taobao.org/mirrors/node-sass/  
registry=https://registry.npm.taobao.org
</code></pre>
</li>
<li>使用<code>yarn add package-name@1.2.3</code>来安装指定版本, <strong>parkage@^4.0.0</strong>表示4.x.x的版本都可以兼容, <strong>package@~4.0.0</strong>表示4.0.x都可以兼容</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[golang环境设置]]></title>
        <id>http://stoneskipping.info/post/golang环境设置</id>
        <link href="http://stoneskipping.info/post/golang环境设置">
        </link>
        <updated>2018-08-30T09:50:45.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>goalng下载地址 <a href="https://dl.google.com/go/go1.11.linux-amd64.tar.gz">https://dl.google.com/go/go1.11.linux-amd64.tar.gz</a></li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>
<p>goalng下载地址 <a href="https://dl.google.com/go/go1.11.linux-amd64.tar.gz">https://dl.google.com/go/go1.11.linux-amd64.tar.gz</a></p>
<!-- more -->
</li>
<li>
<p>解压 <code>tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz</code> <strong>请使用root权限</strong></p>
</li>
<li>
<p>配置go环境变量 <code>export PATH=$PATH:/usr/local/go/bin</code></p>
</li>
<li>
<p>测试go可用 <code>go version</code></p>
</li>
<li>
<p>添加GOPATH <code>export GOPATH=/home/go</code></p>
</li>
<li>
<p>添加go bin <code>export PATH=$PATH:/home/go/bin</code></p>
</li>
<li>
<p>安装glide <code>curl https://glide.sh/get | sh</code></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[zec的安装]]></title>
        <id>http://stoneskipping.info/post/zec的安装</id>
        <link href="http://stoneskipping.info/post/zec的安装">
        </link>
        <updated>2018-07-19T12:34:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="问题1-glibcxx_3420">问题1 GLIBCXX_3.4.20</h3>
<pre><code>/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found
</code></pre>
<p>运行下面的命令，发现时少了3.4.20</p>
<pre><code>[root@localhost src]# strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX
GLIBCXX_3.4
GLIBCXX_3.4.1
GLIBCXX_3.4.2
GLIBCXX_3.4.3
GLIBCXX_3.4.4
GLIBCXX_3.4.5
GLIBCXX_3.4.6
GLIBCXX_3.4.7
GLIBCXX_3.4.8
GLIBCXX_3.4.9
GLIBCXX_3.4.10
GLIBCXX_3.4.11
GLIBCXX_3.4.12
GLIBCXX_3.4.13
GLIBCXX_3.4.14
GLIBCXX_3.4.15
GLIBCXX_3.4.16
GLIBCXX_3.4.17
GLIBCXX_3.4.18
GLIBCXX_3.4.19
GLIBCXX_DEBUG_MESSAGE_LENGTH
</code></pre>
<ul>
<li>先安装gcc</li>
</ul>
<pre><code>wget https://ftp.gnu.org/gnu/gcc/gcc-8.1.0/gcc-8.1.0.tar.gz
//解压
//required libraries:
yum install libmpc-devel mpfr-devel gmp-devel

yum install zlib-devel*

./configure --with-system-zlib --disable-multilib --enable-languages=c,c++

make -j 8 &lt;== this may take around 70 minutes or less to finish with 8 threads
              (depending on your cpu speed)

make install
</code></pre>
<p>参考stackoverflow文章<br>
<a href="https://stackoverflow.com/questions/36327805/how-to-install-gcc-5-3-with-yum-on-centos-7-2">How to Install gcc 5.3 with yum on CentOS 7.2</a><br>
然后找到libstdc++.so.6.0.25</p>
<p><code>find / -name libstdc++.so.6*</code></p>
<ul>
<li>替换原来的libstdc++.so.6</li>
</ul>
<pre><code>cp /usr/local/lib64/libstdc++.so.6.0.21 /usr/lib64/
cd /usr/lib64/
rm -f libstdc++.so.6
ln -s libstdc++.so.6.0.21 libstdc++.so.6
</code></pre>
<h3 id="问题2-没有glibc_218">问题2 没有glibc_2.18</h3>
<pre><code>/lib64/libc.so.6: version `GLIBC_2.18' not found (required by /lib64/libstdc++.so.6)
</code></pre>
<ul>
<li>安装</li>
</ul>
<pre><code>curl -O http://ftp.gnu.org/gnu/glibc/glibc-2.18.tar.gz
tar zxf glibc-2.18.tar.gz 
cd glibc-2.18/
mkdir build
cd build/
../configure --prefix=/usr
make -j 4
make install
</code></pre>
<p><a href="https://www.jianshu.com/p/92c7a042d8ba">参考链接</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[supervisor的使用]]></title>
        <id>http://stoneskipping.info/post/supervisor的使用</id>
        <link href="http://stoneskipping.info/post/supervisor的使用">
        </link>
        <updated>2018-06-25T14:59:44.000Z</updated>
        <summary type="html"><![CDATA[<p>supervisor是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。</p>
]]></summary>
        <content type="html"><![CDATA[<p>supervisor是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。</p>
<!-- more -->
<h4 id="安装">安装</h4>
<p>可以使用</p>
<p><code>pip install supervisor</code><br>
<code>pip install git+https://github.com/Supervisor/supervisor</code> python3版本</p>
<p>或者用</p>
<p><code>yum install supervisor</code></p>
<h4 id="配置">配置</h4>
<p>获取配置文件</p>
<p><code>echo_supervisord_conf &gt; /etc/supervisord.conf</code><br>
如果出现<code>echo_supervisord_conf: command not **found**</code> 则可能需要输入全路径，使用<br>
<code>find / -name supervisor*</code>找到路径</p>
<pre><code class="language-ini">[unix_http_server]
file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用
;chmod=0700                 ; socket 文件的 mode，默认是 0700
;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid

;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面
;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性
;username=user              ; 登录管理后台的用户名
;password=123               ; 登录管理后台的密码

[supervisord]
logfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log
logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB
logfile_backups=10           ; 日志文件保留备份数量默认 10
loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace
pidfile=/tmp/supervisord.pid ; pid 文件
nodaemon=false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动
minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024
minprocs=200                 ; 可以打开的进程数的最小值，默认 200

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致
;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord

; 包含其他的配置文件
[include]
files = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini 用绝对路径
</code></pre>
<h4 id="program配置">program配置</h4>
<p>将include修改为</p>
<pre><code class="language-ini">[include]
files = /etc/supervisord.d/*.ini
</code></pre>
<p>在对应的目录下面创建文件</p>
<pre><code class="language-ini">[supervisord]
environment=PYTHONIOENCODING=utf-8,,FLASK_CONFIG=&quot;TESTING&quot;
[program:batt_allcoin]
directory = /home/app/batt_eth_allcoin ; 程序的启动目录
command = python -B -u batt_eth_allcoin.py  ; 启动命令
autostart = false    ; 在 supervisord 启动的时候也自动启动
startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了
autorestart = false   ; 程序异常退出后自动重启
startretries = 3 
redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false
stdout_logfile_maxbytes = 5MB  ; stdout 日志文件大小，默认 50MB
stdout_logfile_backups = 20     ; stdout 日志文件备份数
stdout_logfile = /home/app/batt_eth_allcoin/debug.log

</code></pre>
<p>另一个配置文件</p>
<pre><code class="language-ini">[program:binance]
directory = /home/app/coins/multi_coin ; 程序的启动目录
command = python2 -B -u imitate_order.py  ; 启动命令
autostart = false    ; 在 supervisord 启动的时候也自动启动
startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了
autorestart = false   ; 程序异常退出后自动重启
startretries = 3 
redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false
stdout_logfile_maxbytes = 5MB  ; stdout 日志文件大小，默认 50MB
stdout_logfile_backups = 20     ; stdout 日志文件备份数
stdout_logfile = /home/app/coins/multi_coin/debug.log
</code></pre>
<h4 id="启动">启动</h4>
<p>启动supervisor</p>
<p><code>supervisord -c /etc/supervisord.conf</code><br>
如果supervisorctl不存在，就找到路径使用 <code>ln -s /usr/local/python3/bin/supervisorctl</code> 添加软链接 <code>/usr/bin/supervisorctl</code></p>
<p>启动进程</p>
<pre><code>$ supervisorctl status
$ supervisorctl stop usercenter
$ supervisorctl start usercenter
$ supervisorctl restart usercenter
$ supervisorctl reread
$ supervisorctl update
</code></pre>
<p><em>注意</em><br>
在使用supervisorctl 时，如果supervisorctl 无法查找到配置文件，</p>
<p>supervisorctl  无法获知与supervisord 该如何通讯，你可能会看到如下错误</p>
<pre><code>root@xxx:/home/operation# supervisorctl status  
http://localhost:9001 refused connection
</code></pre>
<p>处理解决办法：<a href="http://blog.51cto.com/finalbattle/1868454">supervisorctl配置文件简介</a></p>
<pre><code>root@xxx:/home/operation# supervisorctl -c /path/to/supervisord.conf status  
root@xxx:/home/operation# ln -s /path/to/supervisord.conf /etc/
</code></pre>
<p><a href="http://liyangliang.me/posts/2015/06/using-supervisor/">使用 supervisor 管理进程</a></p>
<p><a href="https://stackoverflow.com/questions/12900402/supervisor-and-environment-variables">Supervisor and Environment Variables<br>
</a></p>
<p><a href="https://www.jianshu.com/p/0226b7c59ae2">Supervisor的作用与配置</a></p>
<p><a href="https://blog.csdn.net/orangleliu/article/details/45057377">[supervisor] 使用小记(入门教程)</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mvn导入本地包]]></title>
        <id>http://stoneskipping.info/post/mvn导入本地包</id>
        <link href="http://stoneskipping.info/post/mvn导入本地包">
        </link>
        <updated>2018-05-29T03:20:22.000Z</updated>
        <content type="html"><![CDATA[<p>直接执行mvn即可</p>
<pre><code>mvn install:install-file -Dfile=bitcoin-json-rpc-client-1.1.jar -DgroupId=com.azazar -DartifactId=bitcoin-json-rpc-client -Dversion=1.1 -Dpackaging=jar
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[添加第二个git账号]]></title>
        <id>http://stoneskipping.info/post/添加第二个git账号</id>
        <link href="http://stoneskipping.info/post/添加第二个git账号">
        </link>
        <updated>2018-05-25T05:13:39.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1-生成公钥私钥">1. 生成公钥私钥</h4>
<pre><code>ssh-keygen -t rsa -C &quot;gaohubin@163.com&quot;  
</code></pre>
<p>输入 <strong>自定义</strong>的文件名 id_rsa_lab，然后会生成两个文件 <strong>id_rsa_lab.pub</strong>与 <strong>id_rsa_lab</strong><br>
然后密码不输入直接回车两次，这样虽然有点不安全，但以后不用输密码了</p>
<h4 id="2-将公钥放入gitlab的ssh-key的设置里点击add-key">2. 将公钥放入gitlab的SSH key的设置里，点击add key</h4>
<figure data-type="image" tabindex="1"><img src="addkey.png" alt="" loading="lazy"></figure>
<h4 id="3-在ssh文件夹下面添加无后缀的config文件">3. 在.ssh文件夹下面添加无后缀的config文件</h4>
<p>第一行是域名地址的别名<br>
第二行是IP 或者域名<br>
第三行是 用户名可以改<br>
第四行是 私钥位置</p>
<pre><code>Host gitlab              
Hostname 202.182.104.28
User git
IdentityFile C:\Users\gao\.ssh\id_rsa_lab
</code></pre>
<p>参考: <a href="https://www.cnblogs.com/fanbi/p/7825746.html">一台电脑，两个及多个git账号配置</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python logging简单使用]]></title>
        <id>http://stoneskipping.info/post/python-logging简单使用</id>
        <link href="http://stoneskipping.info/post/python-logging简单使用">
        </link>
        <updated>2018-05-20T06:31:39.000Z</updated>
        <summary type="html"><![CDATA[<p>logging一共有三种4种配置形式</p>
]]></summary>
        <content type="html"><![CDATA[<p>logging一共有三种4种配置形式</p>
<!-- more -->
<ul>
<li>基础型 basicconfig</li>
<li>代码型</li>
<li>字典型</li>
<li>文件ini型</li>
</ul>
<p>只使用了代码型</p>
<pre><code class="language-python">def custom_formatTime(record, datefmt=None):
    return (datetime.datetime.utcnow() + datetime.timedelta(hours=8)).strftime(u&quot;%Y-%m-%d %H:%M:%S&quot;)

# 通过下面的方式进行简单配置输出方式与日志级别
logger = logging.getLogger(&quot;binance_coin&quot;)
# 写入日志文件
handler_file = logging.handlers\
    .RotatingFileHandler(&quot;logs/debug.log&quot;, maxBytes=1024*1024, backupCount = 50,encoding = &quot;UTF-8&quot;)#FileHandler(&quot;test.log&quot;)
handler_file.setLevel(logging.INFO)
handler_error_file = logging.handlers\
    .RotatingFileHandler(&quot;logs/error.log&quot;, maxBytes=1024*1024, backupCount = 10,encoding = &quot;UTF-8&quot;)#FileHandler(&quot;test.log&quot;)
handler_error_file.setLevel(logging.ERROR)
# 打印日志文件到console
handler_console = logging.StreamHandler()
# 格式化器
formatter = logging.Formatter(
    &quot;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&quot;)
formatter.formatTime = custom_formatTime
# 添加格式化到控制器
handler_console.setFormatter(formatter)
handler_file.setFormatter(formatter)
handler_error_file.setFormatter(formatter)
# 添加处理器
logger.addHandler(handler_console)
logger.addHandler(handler_file)
logger.addHandler(handler_error_file)
# log级别
logger.setLevel(logging.INFO)
# 进行记录
logger.debug('often makes a very good meal of %s', 'visiting tourists')
</code></pre>
<h4 id="实现的需求">实现的需求</h4>
<ol>
<li>日志分割，使用RotatingFileHandler处理器设定了maxBytes，在日志文件大小为1M的时候就会将日志文件重命名为<strong>debug.log.1</strong>,然后新建一个<strong>debug.log</strong>,第二次的时候将<strong>debug.log.1</strong>-&gt;<strong>debug.log.2</strong>, 每次都会这样依次更改名字,直到日志文件数量到达backupCount的限制,将最老的一个删除以维持最多50个的日志文件。logging也可以使用时间分割</li>
<li>日志文件的编码, 需要在处理器里面指定<code>encoding = &quot;UTF-8&quot;</code>来避免出现日志编码错误</li>
<li>自定义时间，重写了formatter.formatTime来设定打印出来的时间始终是utc+8</li>
<li>分级别输出，info以上的日志都会用handler_file输出到<strong>debug.log</strong>，error以上的日志都会输出到<strong>error.log</strong></li>
</ol>
<p>参考链接 <a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/logging.html">日志（Logging） — The Hitchhiker's Guide to Python</a></p>
]]></content>
    </entry>
</feed>